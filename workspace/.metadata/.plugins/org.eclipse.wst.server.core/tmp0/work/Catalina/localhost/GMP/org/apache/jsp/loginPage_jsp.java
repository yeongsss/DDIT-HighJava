/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2021-10-04 07:32:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class loginPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width initial-scale=1\">\n");
      out.write("<script src=\"js/jquery-3.6.0.min.js\"></script>\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath() );
      out.write("/css/bootstrap.css\">\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath() );
      out.write("/css/login.css\">\n");
      out.write("<script src=\"");
      out.print(request.getContextPath() );
      out.write("/js/bootstrap.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"js/moment.js\"></script>\n");
      out.write("<script src=\"https://developers.kakao.com/sdk/js/kakao.js\"></script>\n");
      out.write("<!-- 키 58d7ec0a9f82e84f098623ce4850c88d -->\n");
      out.write("<title>Na's Company</title>\n");
      out.write("<style id=\"text\" type=\"text/css\">\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("\t<nav class=\"navigation navbar navbar-expand-sm bg-dark navbar-dark fixed-top\">\n");
      out.write(" \t<p class=\"s1\">Na's Company</p>\n");
      out.write("  <ul class=\"navbar-nav\">\n");
      out.write("    <li class=\"nav-item\">\n");
      out.write("      <a class=\"nav-link\" href=\"#\"></a>\n");
      out.write("    </li>\n");
      out.write("  </ul>\n");
      out.write("</nav>\n");
      out.write("\n");
      out.write("   <div class=\"main\">\n");
      out.write("   \t<header class=\"navbar navbar-default\">\n");
      out.write("      <div class=\"collapse navbar-collapse\"\n");
      out.write("         id=\"bs-example-navbar-collapse-1\">\n");
      out.write("         <ul class=\"nav navbar-nav\">\n");
      out.write("            <li><a href=\"#\">메인</a></li>\n");
      out.write("            <li><a href=\"#\">게시판</a></li>\n");
      out.write("         </ul>\n");
      out.write("         <ul class=\"nav navbar-nav navbar-right\">\n");
      out.write("            <li class=\"dropdown\"><a href=\"#\" class=\"dropdown-toogle\"\n");
      out.write("               data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\"\n");
      out.write("               aria-expanded=\"false\">접속하기<span class=\"caret\"></span></a>\n");
      out.write("               <ul class=\"dropdown-menu\">\n");
      out.write("                  <li class=\"active\"><a href=\"#\">로그인</a></li>\n");
      out.write("                  <li><a href=\"#\">회원가입</a></li>\n");
      out.write("               </ul></li>\n");
      out.write("         </ul>\n");
      out.write("      </div>\n");
      out.write("   </header>\n");
      out.write("   \n");
      out.write("   \n");
      out.write("   <div class=\"container\">\n");
      out.write("      <div class=\"col-lg-4\"></div>\n");
      out.write("      <div class=\"col-lg-4\">\n");
      out.write("         <div class=\"jumbotron\" style=\"padding-top: 20px;\">\n");
      out.write("         \n");
      out.write("            <form id=\"form\" method=\"post\" action=\"");
      out.print(request.getContextPath() );
      out.write("/member/login.do\">\n");
      out.write("               <h3 style=\"text-align: center;\">로그인 화면</h3>\n");
      out.write("               <div class=\"form-group\">\n");
      out.write("                  <input type=\"text\" class=\"form-control\" placeholder=\"아이디\"\n");
      out.write("                     name=\"mem_id\" maxlength=\"20\">\n");
      out.write("               </div>\n");
      out.write("               <div class=\"form-group\">\n");
      out.write("                  <input type=\"password\" class=\"form-control\" placeholder=\"비밀번호\"\n");
      out.write("                     name=\"mem_pw\" maxlength=\"20\">\n");
      out.write("               </div>\n");
      out.write("               <input type=\"submit\" class=\"btn btn-primary form-control\"\n");
      out.write("                  value=\"로그인\">\n");
      out.write("                  <br><br>\n");
      out.write("               <input id=\"resisterBtn\" type=\"button\" class=\"btn btn-primary form-control\"\n");
      out.write("                  value=\"회원가입\" \n");
      out.write("                  onClick=\"location.href='");
      out.print(request.getContextPath() );
      out.write("/member/join2.do'\">\n");
      out.write("                  <br><br>\n");
      out.write("               <div class=\"kakao\">   \n");
      out.write("               <a id=\"kakao-login-btn\" ></a>\n");
      out.write("               <a href=\"http://developers.kakao.com/logout\"></a>\n");
      out.write("                     \n");
      out.write("<!--                <ul class=\"logout\"> -->\n");
      out.write("<!--                   <li onclick=\"kakaoLogout();\"> -->\n");
      out.write("<!--                      <a href=\"javascript:void(0)\"><br> -->\n");
      out.write("<!--                         <span>카카오 로그아웃</span> -->\n");
      out.write("<!--                        </a> -->\n");
      out.write("<!--                   </li> -->\n");
      out.write("<!--                </ul> -->\n");
      out.write("               </div> \n");
      out.write("            </form> \n");
      out.write("\n");
      out.write("         </div>\n");
      out.write("      </div>\n");
      out.write("      <div class=\"col-lg-4\"></div>\n");
      out.write("   </div>\n");
      out.write("   \t\n");
      out.write("   </div>   \n");
      out.write("<script>\n");
      out.write("Kakao.init('58d7ec0a9f82e84f098623ce4850c88d'); //발급받은 키 중 javascript키를 사용해준다.\n");
      out.write("console.log(Kakao.isInitialized()); // sdk초기화여부판단\n");
      out.write("\n");
      out.write("Kakao.Auth.createLoginButton({\n");
      out.write("   container : '#kakao-login-btn',\n");
      out.write("   success:function(res){\n");
      out.write("        Kakao.API.request({\n");
      out.write("             url: '/v2/user/me',\n");
      out.write("             success: function (res) {\n");
      out.write("                kkoLoginJava(res);\n");
      out.write("             },\n");
      out.write("             fail: function (error) {\n");
      out.write("               console.log(error)\n");
      out.write("             },\n");
      out.write("           })// Kakao.API.request\n");
      out.write("   },\n");
      out.write("   fail:function(err){\n");
      out.write("      alert( JSON.stringify(err) );\n");
      out.write("   },\n");
      out.write("});\n");
      out.write("\n");
      out.write("\n");
      out.write("//카카오로그인\n");
      out.write("function kakaoLogin() {\n");
      out.write("    Kakao.Auth.login({\n");
      out.write("       success: function (response) {\n");
      out.write("        Kakao.API.request({\n");
      out.write("          url: '/v2/user/me',\n");
      out.write("          success: function (response) {\n");
      out.write("             console.log(response)\n");
      out.write("          },\n");
      out.write("          fail: function (error) {\n");
      out.write("            console.log(error)\n");
      out.write("          },\n");
      out.write("        })//Kakao.API.request\n");
      out.write("      }, //success function(response)\n");
      out.write("      fail: function (error) {\n");
      out.write("        console.log(error)\n");
      out.write("      },\n");
      out.write("    })\n");
      out.write("  }// kakaoLogin\n");
      out.write("  \n");
      out.write("//카카오로그아웃  \n");
      out.write("  function kakaoLogout() {\n");
      out.write("      if (Kakao.Auth.getAccessToken()) {\n");
      out.write("        Kakao.API.request({\n");
      out.write("          url: '/v1/user/unlink',\n");
      out.write("          success: function (response) {\n");
      out.write("             console.log(response)\n");
      out.write("          },\n");
      out.write("          fail: function (error) {\n");
      out.write("            console.log(error);\n");
      out.write("          },\n");
      out.write("        })\n");
      out.write("        Kakao.Auth.setAccessToken(undefined)\n");
      out.write("      }\n");
      out.write("    }  \n");
      out.write("  \n");
      out.write("  function kkoLoginJava(loginInfo){\n");
      out.write("   console.log(loginInfo);\n");
      out.write("   // false면 정보있음\n");
      out.write("   let isemail = loginInfo.kakao_account.email_needs_agreement;\n");
      out.write("   console.log(isemail);\n");
      out.write("   let email;\n");
      out.write("   \n");
      out.write("   if( !isemail ){\n");
      out.write("   email = loginInfo.kakao_account.email;\n");
      out.write("   }\n");
      out.write("   \n");
      out.write("   let isgender = loginInfo.kakao_account.gender_needs_agreement;\n");
      out.write("   console.log(isgender);\n");
      out.write("   let gender;\n");
      out.write("   \n");
      out.write("   if( !isgender ){\n");
      out.write("      gender = loginInfo.kakao_account.gender;\n");
      out.write("   }\n");
      out.write("     let nickname = loginInfo.properties.nickname;\n");
      out.write("     let id = loginInfo.id;\n");
      out.write("     console.log(loginInfo.connected_at);\n");
      out.write("     \n");
      out.write("     let start = loginInfo.connected_at;\n");
      out.write("     start = moment(start).format('YYYY-MM-DD HH:mm:ss');\n");
      out.write("     console.log(start);\n");
      out.write("  \n");
      out.write("     $.ajax({\n");
      out.write("        url : '/GMP/member/kkoLogin.do',\n");
      out.write("        type : 'post',\n");
      out.write("        data : {\n");
      out.write("           'id' : id\n");
      out.write("        },\n");
      out.write("        success:function(res){\n");
      out.write("           console.log(res);\n");
      out.write("           if(res.mem_kko ===\"0\"){\n");
      out.write("              alert(\"첫 로그인입니다 회원가입 페이지로 이동합니다.\");   \n");
      out.write("           location.href ='");
      out.print(request.getContextPath() );
      out.write("/member/join.do?");
      out.print("kkoId");
      out.write("='+id+'&");
      out.print("isemail");
      out.write("='+isemail+'&");
      out.print("isgender");
      out.write("='+isgender+'&");
      out.print("email");
      out.write("='+email+'&");
      out.print("gender");
      out.write("='+gender+'&");
      out.print("nickname");
      out.write("='+nickname\n");
      out.write("           } else{\n");
      out.write("               console.log(res);\n");
      out.write("               location.href ='");
      out.print(request.getContextPath() );
      out.write("/member/login.do?");
      out.print("mem_id");
      out.write("='+res.mem_id+'&");
      out.print("mem_pw");
      out.write("='+res.mem_pw+'&");
      out.print("dept_no");
      out.write("='+res.dept_no+'&");
      out.print("mem_nm");
      out.write("='+res.mem_nm;\n");
      out.write("           }\n");
      out.write("\n");
      out.write("        },\n");
      out.write("        error:function(error){\n");
      out.write("           console.log(error);\n");
      out.write("        },\n");
      out.write("        dataType : 'json'\n");
      out.write("        \t\n");
      out.write("        \n");
      out.write("     });//ajax   \n");
      out.write("  }\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
