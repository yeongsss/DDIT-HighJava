package src.main.java.ddit.controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import ddit.service.ConferenceServiceImpl;
import ddit.vo.ConferenceVO;

@WebServlet("/conference/conferenceReservation.do")
public class ConferenceReservationController extends HttpServlet {
	private static final long serialVersionUID = 1L;
       

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		HttpSession session = request.getSession();
		List<Integer> list = null;
		
		ConferenceServiceImpl service = null;
		service = ConferenceServiceImpl.getInstance();
		
		String id = (String) session.getAttribute("id");
		
		String start = request.getParameter("startTime");
		String end = request.getParameter("endTime");
		String res_start = start.toString().split("T")[0] + start.toString().split("T")[1]; 
		String res_end = end.toString().split("T")[0] + end.toString().split("T")[1];
		
		int mem_no = (int) session.getAttribute("memNo");
		String roomNO = request.getParameter("conferenceRoom");
		int con_no = Integer.parseInt(roomNO);
		
		ConferenceVO cVo = new ConferenceVO();
		cVo.setCon_no(con_no);
		cVo.setMem_no(mem_no);
		cVo.setRes_start(res_start);
		cVo.setRes_end(res_end);
		
		int cnt = service.insertConference(cVo);
		
		if (cnt > 0) {
			request.getRequestDispatcher("/conference/conferenceList.do").forward(request, response);
		} else {
			// 이미 예약되어있다고 띄우기
			request.getRequestDispatcher("/conference/conferenceList.do").forward(request, response);
		}
		
		
		
	
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doGet(request, response);
	}

}
